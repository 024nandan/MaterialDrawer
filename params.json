{"name":"Materialdrawer","tagline":"A simple take on creating a easy to use and fast material drawer implementation","body":"#MaterialDrawer  [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.mikepenz.materialdrawer/library/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.mikepenz.materialdrawer/library) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-MaterialDrawer-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1526)\r\n\r\nThe **MaterialDrawer** library aims to provide a quick and easy Activity to create and implement a drawer layout in your application.\r\n\r\nHere's a quick overview of functions it include:\r\n\r\n- **easy integration**\r\n- quick and simple api\r\n- follows the Google Material Design Guidelines\r\n- modify the colors on the go\r\n- **uses the AppCompat support library**\r\n- comes with a basetheme which helps if you want an activity with a colored statusbar\r\n- the navigationdrawer is also under the statusbar\r\n- compatible down to **API Level 10**\r\n- **supports multiple drawers**\r\n- comes with multiple default drawer items\r\n- **badge** support\r\n\r\n\r\n#Preview\r\n##Demo\r\nYou can try it out here [Google Play](https://play.google.com/store/apps/details?id=com.mikepenz.unsplash) (wall:splash an open source application which uses this drawer implementation)\r\n\r\n##Screenshots\r\n![Image](https://raw.githubusercontent.com/mikepenz/MaterialDrawer/master/DEV/screenshots/screenshot1_small.png)\r\n![Image](https://raw.githubusercontent.com/mikepenz/MaterialDrawer/master/DEV/screenshots/screenshot2_small.png)\r\n\r\n\r\n#Include in your project\r\n##Using Maven\r\nThe MaterialDrawer Library is pushed to [Maven Central](http://search.maven.org/#search|ga|1|g%3A%22com.mikepenz.materialdrawer%22), so you just need to add the following dependency to your `build.gradle`.\r\n\r\n```javascript\r\ncompile('com.mikepenz.materialdrawer:library:1.0.0@aar') {\r\n\ttransitive = true\r\n}\r\n```\r\n\r\n##How to use\r\nHere's a quick overview what you have to do within your application.\r\n\r\n###Activity with Toolbar\r\n####Code:\r\nIt's (theoretically) a one-liner :D\r\n```java\r\nnew Drawer()\r\n    .withActivity(this)\r\n    .withToolbar(toolbar)\r\n    .addDrawerItems(\r\n\t    new PrimaryDrawerItem().withName(R.string.drawer_item_home),\r\n\t    new DividerDrawerItem(),\r\n\t    new SecondaryDrawerItem().withName(R.string.drawer_item_settings)\r\n    )\r\n    .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {\r\n    @Override\r\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id, IDrawerItem drawerItem) {\r\n    \t// do something with the clicked item :D\r\n    }\r\n    })\r\n    .build();\r\n```\r\n\r\n###Activity with ActionBar\r\n####Code:\r\nIt's (theoretically) a one-liner :D\r\n```java\r\nnew Drawer()\r\n\t.withActivity(this)\r\n\t.withTranslucentStatusBar(false)\r\n\t.addDrawerItems(\r\n\t\t//pass your items here\r\n\t)\r\n\t.build();\r\n```\r\n\r\n###Activity with Multiple Drawers\r\n####Code:\r\nIt's (theoretically) a one-liner :D\r\n```java\r\nDrawer.Result result = new Drawer()\r\n\t.withActivity(this)\r\n\t.withToolbar(toolbar)\r\n\t.withHeader(R.layout.header)\r\n\t.addDrawerItems(\r\n\t\t//pass your items here\r\n\t)\r\n\t.build();\r\n\r\nnew Drawer()\r\n\t.withActivity(this)\r\n    .withFooter(R.layout.footer)\r\n    .withStickyFooter(R.layout.sticky_footer)\r\n    .addDrawerItems(\r\n    \t//pass your items here\r\n    )\r\n    .withDrawerGravity(Gravity.END)\r\n    .append(result);\r\n```\r\n\r\n###Method description\r\n####Code:\r\n```java\r\nnew Drawer()\r\n                //set the activity so we can inflate layouts automatically\r\n                .withActivity(this)\r\n                //set the toolbar to use with the drawer. will allow special stuff like ActionBarDrawerToggle\r\n                .withToolbar(toolbar)\r\n                //set the layout for the drawer manually. normally handled by the library\r\n                .withDrawerLayout(VIEW|RES)\r\n                //set the gravity for the drawer DEFAULT: START\r\n                .withDrawerGravity(Gravity.END)\r\n                //set this if you use the translucent statusBar feature DEFAULT: true\r\n                .withTranslucentStatusBar(true)\r\n                //set this to disable the ActionBarDrawerToggle, or pass a custom ActionBarDrawerToggle DEFAULT: true\r\n                .withActionBarDrawerToggle(BOOLEAN|ActionBarDrawerToggle)\r\n                //set the header for the drawer\r\n                .withHeader(VIEW|RES)\r\n                //set this to disable the divider after the header DEFAULT: true\r\n                .withHeaderDivider(false)\r\n                //set the footer for the drawer\r\n                .withFooter(VIEW|RES)\r\n                //set this to disable the divider before the footer DEFAULT: true\r\n                .withFooterDivider(false)\r\n                //set the sticky footer for the drawer (this one is always visible)\r\n                .withStickyFooter(VIEW|RES)\r\n                //set this if you want a onClick event as soon as you call .build() for the initial set DEFAULT: false\r\n                .withFireOnInitialOnClick(true)\r\n                //set the initial selected item. this is the position of the item. NOT the identifier\r\n                .withSelectedItem(0)\r\n                //set this to pass a custom ListView to the drawer. normally handled by the library\r\n                .withListView(VIEW)\r\n                //set this to pass a custom BaseDrawerAdapter to the drawer. normally handled by the library\r\n                .withAdapter(BaseDrawerAdapter)\r\n                //set one of this parameters to set the items for the drawer. not required if you pass your own adapter or even your own listView\r\n                .withDrawerItems()\r\n                .addDrawerItems()\r\n                //set this to disable the auto-close of the drawer after onClick DEFAULT: true\r\n                .withCloseOnClick(false)\r\n                //set this to modify the delay to close the drawer. this is a \"hack\" to prevent lag after onClick DEFAULT: 150 / DISABLE: -1\r\n                .withDelayOnDrawerClose(-1)\r\n                //set one of these methods to set listeners for the drawer\r\n                .withOnDrawerListener()\r\n                .withOnDrawerItemClickListener()\r\n                .withOnDrawerItemLongClickListener()\r\n                .withOnDrawerItemSelectedListener()\r\n                //set this method if you got a savedInstance (find more details in the sample application)\r\n                .withSavedInstance()\r\n                //set the width of the drawer FROM RES/DP/PX (just use one)\r\n                .withDrawerWidthRes(R.dimen.material_drawer_width)\r\n                .withDrawerWidthDp(240)\r\n                .withDrawerWidthPx(1000)\r\n                //set this if you use an actionBar and want also a translucent statusBar (really rare scenario) DEFAULT: false\r\n                .withTranslucentActionBarCompatibility(true)\r\n                //use one of those methods to finalize the drawer and to build it. append to add a second drawer to an existing drawer\r\n                .build()\r\n                .append(Drawer.Result)\r\n```\r\n\r\n###AndroidManifest.xml (OPTIONAL)\r\nYou can and should use (one of) the provided themes for your application or activity which contains the drawer. They contain many special settings for different Android versions.\r\n\r\n- MaterialDrawerTheme\r\n- MaterialDrawerTheme.TranslucentStatus\r\n- MaterialDrawerTheme.ActionBar\r\n- MaterialDrawerTheme.ActionBar.TranslucentStatus\r\n- MaterialDrawerTheme.Light\r\n- MaterialDrawerTheme.Light.TranslucentStatus\r\n- MaterialDrawerTheme.Light.ActionBar\r\n- MaterialDrawerTheme.Light.ActionBar.TranslucentStatus\r\n- MaterialDrawerTheme.Light.DarkActionBar\r\n- MaterialDrawerTheme.Light.DarkActionBar.TranslucentStatus\r\n- MaterialDrawerTheme.Light.DarkActionBar.ActionBar\r\n- MaterialDrawerTheme.Light.DarkActionBar.ActionBar.TranslucentStatus\r\n  \r\n\r\n\r\n###styles.xml (OPTIONAL)\r\nYou have to use the provided theme for this to get it working.\r\nOverwrite following colors to create a quick custom style for your application\r\n```xml\r\n\t<!-- Material DEFAULT colors -->\r\n    <color name=\"material_drawer_primary\">#2196F3</color>\r\n    <color name=\"material_drawer_primary_dark\">#1976D2</color>\r\n    <color name=\"material_drawer_primary_light\">#BBDEFB</color>\r\n    <color name=\"material_drawer_accent\">#FF4081</color>\r\n    <color name=\"material_drawer_window_background\">#F9F9F9</color>\r\n    <color name=\"material_drawer_background\">#F9F9F9</color>\r\n    <!-- Material DEFAULT text / items colors -->\r\n    <color name=\"material_drawer_icons\">#FFF</color>\r\n    <color name=\"material_drawer_primary_text\">#212121</color>\r\n    <color name=\"material_drawer_secondary_text\">#727272</color>\r\n    <color name=\"material_drawer_hint_text\">#B8B8B8</color>\r\n    <color name=\"material_drawer_divider\">#B6B6B6</color>\r\n    <!-- Material DEFAULT drawer colors -->\r\n    <color name=\"material_drawer_selected\">#E8E8E8</color>\r\n    <color name=\"material_drawer_selected_text\">#2196F3</color>\r\n```\r\n\r\n#Credits\r\n\r\n- Miros≈Çaw Stanek - [GitHub](https://github.com/frogermcs)\r\n\t- For his InstaMaterial concept and the idea of inflating the drawerLayout [InstaMaterial Concept](http://frogermcs.github.io/InstaMaterial-concept-part-7-navigation-drawer/)\r\n\r\n\r\n#Developed By\r\n\r\n* Mike Penz - http://mikepenz.com - <mikepenz@gmail.com>\r\n\r\n\r\n#License\r\n\r\n    Copyright 2015 Mike Penz\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}