{"name":"Materialdrawer","tagline":"A simple take on creating an easy to use and fast material navigation drawer implementation","body":"#MaterialDrawer  [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.mikepenz.materialdrawer/library/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.mikepenz.materialdrawer/library) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-MaterialDrawer-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1526)\r\n\r\n[![Join the chat at https://gitter.im/mikepenz/MaterialDrawer](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mikepenz/MaterialDrawer?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nThe **MaterialDrawer** library aims to provide the easiest possible implementation of a navigation drawer for your application. It provides a great amount of out of the box customizations and also includes an easy to use header which can be used as **AccountSwitcher**.\r\n\r\n\r\n- **the easiest possible integration**\r\n - integrate in less then **5 minutes**\r\n- includes an **AccountSwitcher**\r\n - Easy to use\r\n - No additional setup\r\n - Many additional usecases possible\r\n - Compact style included\r\n- quick and simple api\r\n- follows the **Google Material Design Guidelines**\r\n- comes with various themes which help to get your own themes clean\r\n- modify the colors on the go\r\n- **uses the AppCompat support library**\r\n- compatible down to **API Level 10**\r\n- **supports multiple drawers**\r\n- comes with multiple default drawer items\r\n- **badge** support\r\n- define custom drawer items\r\n- tested and **stable**\r\n- many many options how to display the drawer\r\n - Translucent StatusBar\r\n - Display Above the Toolbar\r\n - Display Under the Toolbar\r\n\r\n\r\n#Preview\r\n##Demo\r\nYou can try it out here [Google Play](https://play.google.com/store/apps/details?id=com.mikepenz.unsplash) (wall:splash an open source application which uses this drawer implementation)\r\n\r\n##Screenshots\r\n![Image](https://raw.githubusercontent.com/mikepenz/MaterialDrawer/master/DEV/screenshots/screenshot1_small.png)\r\n![Image](https://raw.githubusercontent.com/mikepenz/MaterialDrawer/master/DEV/screenshots/screenshot2_small.png)\r\n\r\n![Image](https://raw.githubusercontent.com/mikepenz/MaterialDrawer/master/DEV/screenshots/screenshot3_small.png)\r\n![Image](https://raw.githubusercontent.com/mikepenz/MaterialDrawer/master/DEV/screenshots/screenshot4_small.png)\r\n\r\n\r\n#Include in your project\r\n##Using Maven\r\nThe MaterialDrawer Library is pushed to [Maven Central](http://search.maven.org/#search|ga|1|g%3A%22com.mikepenz.materialdrawer%22), so you just need to add the following dependency to your `build.gradle`.\r\n\r\n```javascript\r\ncompile('com.mikepenz.materialdrawer:library:2.8.1@aar') {\r\n\ttransitive = true\r\n}\r\n```\r\n\r\n##How to use\r\nHere's a quick overview what you have to do within your application.\r\nYou can find a detailed description of all methods in the [WIKI](https://github.com/mikepenz/MaterialDrawer/wiki).\r\n\r\n###Upgrade Notes\r\n#### < v2.8.0\r\nv2.8.0 now uses the latest com.android.support:appcompat version 22.1.0. Please update if you use an older version.\r\n\r\n#### < v2.7.7\r\nBeginning with v2.7.7, the `DrawerImageLoader.IDrawerImageLoader` interface now requires you to override the `placeholder` method (returning a custom placeholder Drawable). You may simply return a null Drawable to retain pre-v2.7.7 behavior, but it must be defined. See the sample app for an example.\r\n\r\n#### < v2.6.0\r\nStarting with v2.6.0 the `OnAccountHeaderListener.onProfileChanged` and `OnAccountHeaderSelectionViewClickListener.onClick` events will allow you to return an boolean.\r\nThis boolean indicates if the event was consumed. Return false if you want the drawer to get closed. Also the `onProfileChanged` event will now contain a boolean\r\nvariable which indicates if the clicked profile is the current profile.\r\n\r\n#### < v2.5.0\r\nIf you used a version prior to v2.5.0 check following:\r\nYou can remove the padding above the ToolBar. The library now uses a ScrimInsetsLayout. Just set your toolbar within the layout\r\nas you would normally do.\r\nThe MaterialDrawer now uses a translucent style by default. (Even if you use a non translucent theme) You can disable this by\r\nsetting `.withTranslucentStatusBar(false)`.\r\n\r\n\r\n###Minimal SetUp\r\n\r\n####Code:\r\nIt's (theoretically) a one-liner :D. This will create an empty drawer.\r\n```java\r\nnew Drawer().withActivity(this).build()\r\n```\r\n\r\n###Activity with Toolbar\r\n####Code:\r\n```java\r\nDrawer.Result result = new Drawer()\r\n    .withActivity(this)\r\n    .withToolbar(toolbar)\r\n    .addDrawerItems(\r\n\t    new PrimaryDrawerItem().withName(R.string.drawer_item_home),\r\n\t    new DividerDrawerItem(),\r\n\t    new SecondaryDrawerItem().withName(R.string.drawer_item_settings)\r\n    )\r\n    .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {\r\n    @Override\r\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id, IDrawerItem drawerItem) {\r\n    \t// do something with the clicked item :D\r\n    }\r\n    })\r\n    .build();\r\n\r\n//use the result object to get different views of the drawer or modify it's data\r\n//some sample calls\r\nresult.setSelectionByIdentifier(1);\r\nresult.openDrawer();\r\nresult.closeDrawer();\r\nresult.isDrawerOpen();\r\nresult.addItem(..);\r\n..\r\n\r\n```\r\n\r\n###Drawer with AccountSwitcher\r\n####Code:\r\n```java\r\n\r\n// Create the AccountHeader\r\nheaderResult = new AccountHeader()\r\n\t.withActivity(this)\r\n    .withHeaderBackground(R.drawable.header)\r\n\t.addProfiles(\r\n\t\tnew ProfileDrawerItem().withName(\"Mike Penz\").withEmail(\"mikepenz@gmail.com\").withIcon(getResources().getDrawable(R.drawable.profile))\r\n\t)\r\n    .withOnAccountHeaderListener(new AccountHeader.OnAccountHeaderListener() {\r\n\t\t@Override\r\n\t\tpublic boolean onProfileChanged(View view, IProfile profile, boolean currentProfile) {\r\n\t\t    return false;\r\n\t\t}\r\n\t})\r\n\t.build();\r\n                \r\n//Now create your drawer and pass the AccountHeader.Result\r\nDrawer.Result result = new Drawer()\r\n    .withActivity(this)\r\n    .withToolbar(toolbar)\r\n    .withAccountHeader(headerResult)\r\n    .addDrawerItems(\r\n\t    new PrimaryDrawerItem().withName(R.string.drawer_item_home),\r\n\t    new DividerDrawerItem(),\r\n\t    new SecondaryDrawerItem().withName(R.string.drawer_item_settings)\r\n    )\r\n    .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {\r\n    @Override\r\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id, IDrawerItem drawerItem) {\r\n    \t// do something with the clicked item :D\r\n    }\r\n    })\r\n    .build();\r\n\r\n```\r\n\r\n###Activity with ActionBar\r\n####Code:\r\n```java\r\nnew Drawer()\r\n\t.withActivity(this)\r\n\t.withTranslucentStatusBar(false)\r\n    .withActionBarDrawerToggle(false)\r\n\t.addDrawerItems(\r\n\t\t//pass your items here\r\n\t)\r\n\t.build();\r\n```\r\n\r\n###Activity with Multiple Drawers\r\n####Code:\r\n```java\r\nDrawer.Result result = new Drawer()\r\n\t.withActivity(this)\r\n\t.withToolbar(toolbar)\r\n\t.addDrawerItems(\r\n\t\t//pass your items here\r\n\t)\r\n\t.build();\r\n\r\nnew Drawer()\r\n\t.withActivity(this)\r\n    .addDrawerItems(\r\n    \t//pass your items here\r\n    )\r\n    .withDrawerGravity(Gravity.END)\r\n    .append(result);\r\n```\r\n\r\n\r\n###Switching between Back-Arrow or Hamburger-Icon\r\nIf you use the included ActionBarDrawerToggle you can switch between back-arrow or hamburger-icon\r\nwith the following code snippet. (Please note that the order of these lines matter)\r\n####Code - Show the back arrow:\r\n```java\r\nresult.getActionBarDrawerToggle().setDrawerIndicatorEnabled(false);\r\ngetSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n```\r\n####Code - Show the hamburger icon:\r\n```java\r\ngetSupportActionBar().setDisplayHomeAsUpEnabled(false);\r\nresult.getActionBarDrawerToggle().setDrawerIndicatorEnabled(true);\r\n```\r\n\r\n\r\n###AndroidManifest.xml\r\nUse one of the provided themes. They all use the AppCompat theme as parent and define the color values for the drawer.\r\n\r\n**NOTE:** The theme states ActionBar and not NoActionBar like the Appcompat style\r\n\r\n- **MaterialDrawerTheme** (extends Theme.AppCompat.NoActionBar)\r\n- **MaterialDrawerTheme.TranslucentStatus**\r\n- **MaterialDrawerTheme.ActionBar** (extends Theme.AppCompat)\r\n- **MaterialDrawerTheme.ActionBar.TranslucentStatus**\r\n- **MaterialDrawerTheme.Light** (extends Theme.AppCompat.Light.NoActionBar)\r\n- **MaterialDrawerTheme.Light.TranslucentStatus**\r\n- **MaterialDrawerTheme.Light.ActionBar** (extends Theme.AppCompat.Light)\r\n- **MaterialDrawerTheme.Light.ActionBar.TranslucentStatus**\r\n- **MaterialDrawerTheme.Light.DarkToolbar** (extends Theme.AppCompat.DarkActionBar) (disabled the ActionBar)\r\n- **MaterialDrawerTheme.Light.DarkToolbar.TranslucentStatus**\r\n- **MaterialDrawerTheme.Light.DarkToolbar.ActionBar** (extends Theme.AppCompat.DarkActionBar)\r\n- **MaterialDrawerTheme.Light.DarkToolbar.ActionBar.TranslucentStatus**\r\n  \r\n\r\n###Style the drawer\r\n#### Use of a none MaterialDrawer.* style\r\nIf you don't use one of the provided styles you have to add the style values to your style. Here's a simple sample. \r\nThis is the same as the Custom style just with a parent like `parent=\"Theme.AppCompat.Light.DarkActionBar\"`\r\n#### Custom style - styles.xml\r\nCreate your custom style and use one of the provided themes as parent. If you don't need a custom theme see the next section, how you can set the colors just by overwriting the original colors.\r\n\r\n```xml\r\n    <style name=\"CustomTheme\" parent=\"MaterialDrawerTheme\">\r\n        <!-- ...and here we setting appcompat’s color theming attrs -->\r\n        <item name=\"colorPrimary\">@color/material_drawer_primary</item>\r\n        <item name=\"colorPrimaryDark\">@color/material_drawer_primary_dark</item>\r\n        <item name=\"colorAccent\">@color/material_drawer_accent</item>\r\n\r\n        <!-- MaterialDrawer specific values -->\r\n        <item name=\"material_drawer_window_background\">@color/material_drawer_window_background</item>\r\n        <item name=\"material_drawer_background\">@color/material_drawer_background</item>\r\n        <item name=\"material_drawer_icons\">@color/material_drawer_icons</item>\r\n        <item name=\"material_drawer_primary_text\">@color/material_drawer_primary_text</item>\r\n        <item name=\"material_drawer_primary_icon\">@color/material_drawer_primary_icon</item>\r\n        <item name=\"material_drawer_secondary_text\">@color/material_drawer_secondary_text</item>\r\n        <item name=\"material_drawer_hint_text\">@color/material_drawer_hint_text</item>\r\n        <item name=\"material_drawer_divider\">@color/material_drawer_divider</item>\r\n        <item name=\"material_drawer_selected\">@color/material_drawer_selected</item>\r\n        <item name=\"material_drawer_selected_text\">@color/material_drawer_selected_text</item>\r\n        <item name=\"material_drawer_header_selection_text\">@color/material_drawer_header_selection_text</item>\r\n    </style>\r\n```\r\n\r\n### Custom colors - colors.xml\r\nNo need to create a custom theme. Just set these colors (or some of them) and you have your own style.\r\n```xml\r\n\t<!-- Material DEFAULT colors -->\r\n    <color name=\"material_drawer_primary\">#2196F3</color>\r\n    <color name=\"material_drawer_primary_dark\">#1976D2</color>\r\n    <color name=\"material_drawer_primary_light\">#BBDEFB</color>\r\n    <color name=\"material_drawer_accent\">#FF4081</color>\r\n    \r\n    <!-- OVERWRITE THESE COLORS FOR A LIGHT THEME -->\r\n    <!-- MaterialDrawer DEFAULT colors -->\r\n    <color name=\"material_drawer_window_background\">#F9F9F9</color>\r\n    <color name=\"material_drawer_background\">#F9F9F9</color>\r\n    <!-- Material DEFAULT text / items colors -->\r\n    <color name=\"material_drawer_icons\">#FFF</color>\r\n    <color name=\"material_drawer_primary_text\">#DE000000</color>\r\n    <color name=\"material_drawer_primary_icon\">#8A000000</color>\r\n    <color name=\"material_drawer_secondary_text\">#8A000000</color>\r\n    <color name=\"material_drawer_hint_text\">#42000000</color>\r\n    <color name=\"material_drawer_divider\">#1F000000</color>\r\n    <!-- Material DEFAULT drawer colors -->\r\n    <color name=\"material_drawer_selected\">#E8E8E8</color>\r\n    <color name=\"material_drawer_selected_text\">#2196F3</color>\r\n    <color name=\"material_drawer_header_selection_text\">#FFF</color>\r\n    \r\n    <!-- OVERWRITE THESE COLORS FOR A DARK THEME -->\r\n    <!-- MaterialDrawer DEFAULT DARK colors -->\r\n    <color name=\"material_drawer_dark_window_background\">#303030</color>\r\n    <color name=\"material_drawer_dark_background\">#303030</color>\r\n    <!-- MaterialDrawer DEFAULT DARK text / items colors -->\r\n    <color name=\"material_drawer_dark_icons\">#000</color>\r\n    <color name=\"material_drawer_dark_primary_text\">#DEFFFFFF</color>\r\n    <color name=\"material_drawer_dark_primary_icon\">#8AFFFFFF</color>\r\n    <color name=\"material_drawer_dark_secondary_text\">#8AFFFFFF</color>\r\n    <color name=\"material_drawer_dark_hint_text\">#42FFFFFF</color>\r\n    <color name=\"material_drawer_dark_divider\">#1FFFFFFF</color>\r\n    <!-- MaterialDrawer DEFAULT DARK drawer colors -->\r\n    <color name=\"material_drawer_dark_selected\">#202020</color>\r\n    <color name=\"material_drawer_dark_selected_text\">@color/material_drawer_primary</color>\r\n    <color name=\"material_drawer_dark_header_selection_text\">#FFF</color>\r\n```\r\n\r\n##FAQ\r\n#####How can i create a drawer without a default selection\r\n```java\r\n//just use this with the Drawer.Builder\r\n.withSelectedItem(-1)\r\n```\r\n\r\n#####How can i use this with espresso\r\n```java\r\nandroidTestCompile ('com.android.support.test.espresso:espresso-contrib:2.0') {\r\n//this library uses the newest app compat v22 but the espresso contrib still v21. \r\n//you have to specifically exclude the older verisions of the contrib library or\r\n// there will be some conflicts\r\n    exclude module: 'support-annotations'\r\n    exclude module: 'support-v4'\r\n    exclude module: 'recyclerview-v7'\r\n}\r\n```\r\n\r\n##Apps using the MaterialDrawer\r\n(feel free to send me new projects)\r\n\r\n* [wall:splash](https://play.google.com/store/apps/details?id=com.mikepenz.unsplash)\r\n\r\n* [GitSkarios](https://play.google.com/store/apps/details?id=com.alorma.github)\r\n\r\n* [Academic Schedule](https://play.google.com/store/apps/details?id=com.auebcsschedule.ppt)\r\n\r\n* [Strength](https://play.google.com/store/apps/details?id=com.e13engineering.strength)\r\n\r\n\r\n\r\n#Credits\r\n\r\n- Mirosław Stanek - [GitHub](https://github.com/frogermcs)\r\n\t- For his InstaMaterial concept and the idea of inflating the drawerLayout [InstaMaterial Concept](http://frogermcs.github.io/InstaMaterial-concept-part-7-navigation-drawer/)\r\n\r\n- Lunae Luman - [Behance](https://www.behance.net/gallery/18526001/Material-Wallpaper) for the Header Image\r\n\r\n#Developed By\r\n\r\n* Mike Penz - http://mikepenz.com - <mikepenz@gmail.com>\r\n\r\n\r\n#License\r\n\r\n    Copyright 2015 Mike Penz\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}